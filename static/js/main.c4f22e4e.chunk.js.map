{"version":3,"sources":["components/TodoHeader.js","components/TodoItem.js","components/TodoList.js","components/TodoMain.js","components/TodosFilters.js","components/TodoFooter.js","App.js","index.js"],"names":["TodoHeader","state","title","setTitle","_ref","target","value","slice","_this","setState","validateForm","event","preventDefault","prevState","trim","props","addTodo","id","Date","completed","isEditable","render","react_default","a","createElement","className","cn","onSubmit","placeholder","type","onChange","onBlur","Component","TodoItem","editValue","setEditValue","_this$props","todo","onToggle","onDelete","onEdit","handleKeyPress","setEditedValue","checked","htmlFor","concat","onDoubleClick","onClick","defaultValue","autoFocus","onKeyDown","TodoList","items","onToggleTodo","onDeleteTodo","onEditTodo","map","item","components_TodoItem","key","TodoMain","todos","visibleTodos","onToggleTodoCompleted","onDeleteCurrentTodo","onToggleAllCompleted","onEditCurrentTodo","isAllCompleted","every","components_TodoList","TodosFilters","onFilter","selectedFilter","Object","values","FILTER_TYPES","filter","href","TodoFooter","currentFilter","onClearAllCompleted","onSetFilter","completedTodos","length","components_TodosFilters","some","all","active","App","JSON","parse","localStorage","getItem","toConsumableArray","deleteTodo","todoId","clearAllCompleted","toggleTodoCompleted","objectSpread2","toggleAllCompleted","setFilter","filterTodos","setEditableState","_this$state","components_TodoHeader","Fragment","components_TodoMain","components_TodoFooter","setItem","stringify","this","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c4f22e4e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nclass TodoHeader extends Component {\n  state = {\n    title: '',\n  };\n\n  setTitle = ({ target }) => {\n    const title = target.value.slice(0, 37);\n\n    this.setState({\n      title,\n    });\n  };\n\n  validateForm = (event) => {\n    event.preventDefault();\n\n    this.setState((prevState) => {\n      if (prevState.title.trim() === '') {\n        return '';\n      }\n\n      this.props.addTodo({\n        id: +new Date(),\n        title: prevState.title,\n        completed: false,\n        isEditable: false,\n      });\n\n      return {\n        title: '',\n      };\n    });\n  };\n\n  render = () => {\n    const { title } = this.state;\n\n    return (\n      <header className={cn('header')}>\n        <h1>todos</h1>\n\n        <form onSubmit={this.validateForm}>\n          <input\n            className={cn('new-todo')}\n            placeholder=\"What needs to be done?\"\n            type=\"text\"\n            onChange={this.setTitle}\n            onBlur={this.validateForm}\n            value={title}\n          />\n        </form>\n      </header>\n    );\n  };\n}\n\nTodoHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoHeader;\n","/* eslint-disable jsx-a11y/no-autofocus */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nclass TodoItem extends Component {\n  state = { editValue: '' }\n\n  setEditValue = ({ target }) => {\n    this.setState({\n      editValue: target.value,\n    });\n  }\n\n  render = () => {\n    const {\n      todo,\n      onToggle,\n      onDelete,\n      onEdit,\n      handleKeyPress,\n      setEditedValue,\n    } = this.props;\n    const { editValue } = this.state;\n\n    return (\n      <li className={cn(\n        todo.completed && 'completed',\n        todo.isEditable && 'editing',\n      )}\n      >\n        <div className={cn('view')}>\n          <input\n            type=\"checkbox\"\n            className={cn('toggle')}\n            onChange={onToggle}\n            checked={todo.completed}\n          />\n\n          <label\n            className={cn(todo.completed && 'checked')}\n            htmlFor={`todo-${todo.id}`}\n            onDoubleClick={onEdit}\n          >\n            {todo.title}\n          </label>\n\n          <button\n            type=\"button\"\n            className={cn('destroy')}\n            onClick={onDelete}\n          />\n        </div>\n\n        {todo.isEditable && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            defaultValue={todo.title}\n            autoFocus\n            onChange={this.setEditValue}\n            onKeyDown={\n              event => handleKeyPress(event, todo.id, editValue)\n            }\n            onBlur={\n              event => setEditedValue(event, todo.id, editValue)\n            }\n          />\n        )}\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  handleKeyPress: PropTypes.func.isRequired,\n  setEditedValue: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","/* eslint-disable jsx-a11y/no-autofocus */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({\n  items,\n  onToggleTodo,\n  onDeleteTodo,\n  onEditTodo,\n  handleKeyPress,\n  setEditedValue,\n}) => (\n  <ul className={cn('todo-list')}>\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        todo={item}\n        onToggle={() => onToggleTodo(item.id)}\n        onDelete={() => onDeleteTodo(item.id)}\n        onEdit={() => onEditTodo(item.id)}\n        handleKeyPress={handleKeyPress}\n        setEditedValue={setEditedValue}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onToggleTodo: PropTypes.func.isRequired,\n  onDeleteTodo: PropTypes.func.isRequired,\n  onEditTodo: PropTypes.func.isRequired,\n  handleKeyPress: PropTypes.func.isRequired,\n  setEditedValue: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport TodoList from './TodoList';\n\nconst TodoMain = ({\n  todos,\n  visibleTodos,\n  onToggleTodoCompleted,\n  onDeleteCurrentTodo,\n  onToggleAllCompleted,\n  onEditCurrentTodo,\n  handleKeyPress,\n  setEditedValue,\n}) => {\n  const isAllCompleted = todos.every(todo => todo.completed);\n\n  return (\n    <section className={cn('main')}>\n      <label\n        className={cn(isAllCompleted ? 'label-checked-all' : 'label')}\n        htmlFor=\"toggle-all\"\n      >\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className={cn('toggle-all')}\n          onChange={onToggleAllCompleted}\n          checked={isAllCompleted}\n        />\n          Mark all as complete\n      </label>\n\n      <TodoList\n        items={visibleTodos}\n        onToggleTodo={onToggleTodoCompleted}\n        onDeleteTodo={onDeleteCurrentTodo}\n        onEditTodo={onEditCurrentTodo}\n        handleKeyPress={handleKeyPress}\n        setEditedValue={setEditedValue}\n      />\n    </section>\n  );\n};\n\nTodoMain.propTypes = {\n  visibleTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeleteCurrentTodo: PropTypes.func.isRequired,\n  onToggleTodoCompleted: PropTypes.func.isRequired,\n  onToggleAllCompleted: PropTypes.func.isRequired,\n  onEditCurrentTodo: PropTypes.func.isRequired,\n  handleKeyPress: PropTypes.func.isRequired,\n  setEditedValue: PropTypes.func.isRequired,\n};\n\nexport default TodoMain;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { FILTER_TYPES } from '../App';\n\nconst TodosFilters = ({ onFilter, selectedFilter }) => (\n  <ul className={cn('filters')}>\n    {Object.values(FILTER_TYPES).map(filter => (\n      <li key={filter}>\n        <a\n          href={`#/${filter}`}\n          className={cn(selectedFilter === filter && 'selected')}\n          onClick={() => onFilter(filter)}\n        >\n          {filter}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nTodosFilters.propTypes = {\n  onFilter: PropTypes.func.isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n};\n\nexport default TodosFilters;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport TodosFilters from './TodosFilters';\n\nconst TodoFooter = (\n  { currentFilter, todos, onClearAllCompleted, onSetFilter }\n) => {\n  const completedTodos = todos.filter(todo => !todo.completed).length;\n\n  return (\n    <footer className={cn('footer')}>\n      <span className={cn('todo-count')}>\n        {`${completedTodos} items left`}\n      </span>\n\n      <TodosFilters\n        onFilter={onSetFilter}\n        selectedFilter={currentFilter}\n      />\n\n      {todos.some(todo => todo.completed) && (\n        <button\n          type=\"button\"\n          className={cn('clear-completed')}\n          onClick={onClearAllCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nTodoFooter.propTypes = {\n  currentFilter: PropTypes.string.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onClearAllCompleted: PropTypes.func.isRequired,\n  onSetFilter: PropTypes.func.isRequired,\n};\n\nexport default TodoFooter;\n","import React, { Component } from 'react';\nimport TodoHeader from './components/TodoHeader';\nimport TodoMain from './components/TodoMain';\nimport TodoFooter from './components/TodoFooter';\n\nexport const FILTER_TYPES = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n\nclass App extends Component {\n  state = {\n    todos: JSON.parse(localStorage.getItem('todos')) || [],\n    selectedFilter: FILTER_TYPES.all,\n  };\n\n  componentDidUpdate() {\n    localStorage.setItem('todos', JSON.stringify(this.state.todos));\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        todo,\n      ],\n    }));\n  };\n\n  deleteTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  };\n\n  clearAllCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  };\n\n  toggleTodoCompleted = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  };\n\n  toggleAllCompleted = () => {\n    this.setState((prevState) => {\n      if (prevState.todos.every(todo => todo.completed)) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: false,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  };\n\n  setFilter = (filter) => {\n    this.setState({\n      selectedFilter: filter,\n    });\n  };\n\n  filterTodos = () => {\n    switch (this.state.selectedFilter) {\n      case FILTER_TYPES.active:\n        return this.state.todos.filter(todo => !todo.completed);\n      case FILTER_TYPES.completed:\n        return this.state.todos.filter(todo => todo.completed);\n      case FILTER_TYPES.all:\n        return this.state.todos.filter(todo => todo.id);\n      default:\n        return this.state.todos;\n    }\n  };\n\n  setEditableState = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return {\n            ...todo,\n            isEditable: false,\n          };\n        }\n\n        return {\n          ...todo,\n          isEditable: true,\n        };\n      }),\n    }));\n  };\n\n  handleKeyPress = (event, id, value) => {\n    if (event.key === 'Escape') {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          isEditable: false,\n        })),\n      }));\n    }\n\n    if (event.key === 'Enter') {\n      this.setEditedValue(event, id, value);\n    }\n  }\n\n  setEditedValue = (event, id, value) => {\n    if (!event.target.value) {\n      this.deleteTodo(id);\n    }\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          title: value || todo.title,\n          isEditable: false,\n        };\n      }),\n    }));\n  };\n\n  render = () => {\n    const { todos, selectedFilter } = this.state;\n    const visibleTodos = this.filterTodos();\n\n    return (\n      <section className=\"todoapp\">\n        <TodoHeader\n          addTodo={this.addTodo}\n        />\n\n        {todos.length > 0 && (\n          <>\n            <TodoMain\n              todos={todos}\n              visibleTodos={visibleTodos}\n              onToggleAllCompleted={this.toggleAllCompleted}\n              onToggleTodoCompleted={this.toggleTodoCompleted}\n              onDeleteCurrentTodo={this.deleteTodo}\n              onEditCurrentTodo={this.setEditableState}\n              handleKeyPress={this.handleKeyPress}\n              setEditedValue={this.setEditedValue}\n            />\n\n            <TodoFooter\n              todos={todos}\n              onSetFilter={this.setFilter}\n              currentFilter={selectedFilter}\n              onClearAllCompleted={this.clearAllCompleted}\n            />\n          </>\n        )}\n\n      </section>\n    );\n  };\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}