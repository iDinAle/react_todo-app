{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/TodosFilters.js","App.js","index.js"],"names":["TodoItem","_ref","todo","onToggled","onDeleted","react_default","a","createElement","className","completed","htmlFor","concat","id","type","onChange","checked","title","onClick","TodoList","items","onTodoToggled","onTodoDeleted","map","item","components_TodoItem","key","TodosFilters","filters","onFiltered","selectedFilter","filter","href","FILTERS","App","state","todos","setTitle","event","target","value","replace","slice","_this","setState","addTodo","preventDefault","prevState","trim","Object","toConsumableArray","Date","deleteTodo","todoId","clearAllCompleted","toggleTodoCompleted","objectSpread2","toggleAllComplete","every","setFilter","filterTodos","render","_this$state","completedTodos","length","visibleTodos","isAllCompleted","onSubmit","placeholder","Fragment","components_TodoList","components_TodosFilters","some","Component","ReactDOM","src_App","document","getElementById"],"mappings":"sOAwCeA,EArCE,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,UAAWC,EAApBH,EAAoBG,UAApB,OACfC,EAAAC,EAAAC,cAAA,MAAIC,UAAWN,EAAKO,UAAY,YAAc,IAC5CJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SACEC,UAAWN,EAAKO,UAAY,UAAY,GACxCC,QAAO,QAAAC,OAAUT,EAAKU,KAEtBP,EAAAC,EAAAC,cAAA,SACEM,KAAK,WACLL,UAAU,SACVM,SAAUX,EACVY,QAASb,EAAKO,UACdG,GAAE,QAAAD,OAAUT,EAAKU,MAGlBV,EAAKc,OAGRX,EAAAC,EAAAC,cAAA,UACEM,KAAK,SACLL,UAAU,UACVS,QAASb,OCDFc,EAnBE,SAAAjB,GAAA,IAAGkB,EAAHlB,EAAGkB,MAAOC,EAAVnB,EAAUmB,cAAeC,EAAzBpB,EAAyBoB,cAAzB,OACfhB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACXW,EAAMG,IAAI,SAAAC,GAAI,OACblB,EAAAC,EAAAC,cAACiB,EAAD,CACEC,IAAKF,EAAKX,GACVV,KAAMqB,EACNpB,UAAW,kBAAMiB,EAAcG,EAAKX,KACpCR,UAAW,kBAAMiB,EAAcE,EAAKX,WCc7Bc,EAtBM,SAAAzB,GAAA,IAAG0B,EAAH1B,EAAG0B,QAASC,EAAZ3B,EAAY2B,WAAYC,EAAxB5B,EAAwB4B,eAAxB,OACnBxB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACXmB,EAAQL,IAAI,SAAAQ,GAAM,OACjBzB,EAAAC,EAAAC,cAAA,MAAIkB,IAAKK,GACPzB,EAAAC,EAAAC,cAAA,KACEwB,KAAI,KAAApB,OAAOmB,GACXtB,UAAWqB,IAAmBC,EAAS,WAAa,GACpDb,QAAS,kBAAMW,EAAWE,KAEzBA,QCRLE,EAAU,CACd,MACA,SACA,aAqLaC,6MAjLbC,MAAQ,CACNC,MAAO,GACPnB,MAAO,GACPa,eAAgBG,EAAQ,MAG1BI,SAAW,SAACC,GACV,IAAMrB,EAAQqB,EAAMC,OAAOC,MACxBC,QAAQ,iDAAyB,IACjCC,MAAM,EAAG,IAEZC,EAAKC,SAAS,CACZ3B,aAIJ4B,QAAU,SAACP,GACTA,EAAMQ,iBAENH,EAAKC,SAAS,SAACG,GACb,MAA+B,KAA3BA,EAAU9B,MAAM+B,OACX,GAGF,CACLZ,MAAK,GAAAxB,OAAAqC,OAAAC,EAAA,EAAAD,CAAMF,EAAUX,OAAhB,CAAuB,CAC1BvB,IAAK,IAAIsC,KACTlC,MAAO8B,EAAU9B,MACjBP,WAAW,KAEbO,MAAO,GACPa,eAAgBG,EAAQ,SAK9BmB,WAAa,SAACC,GACZV,EAAKC,SAAS,SAAAG,GAAS,MAAK,CAC1BX,MAAOW,EAAUX,MAAML,OAAO,SAAA5B,GAAI,OAAIA,EAAKU,KAAOwC,UAItDC,kBAAoB,WAClBX,EAAKC,SAAS,SAAAG,GAAS,MAAK,CAC1BX,MAAOW,EAAUX,MAAML,OAAO,SAAA5B,GAAI,OAAKA,EAAKO,kBAIhD6C,oBAAsB,SAACF,GACrBV,EAAKC,SAAS,SAAAG,GAAS,MAAK,CAC1BX,MAAOW,EAAUX,MAAMb,IAAI,SAACpB,GAC1B,OAAIA,EAAKU,KAAOwC,EACPlD,EAGF8C,OAAAO,EAAA,EAAAP,CAAA,GACF9C,EADL,CAEEO,WAAYP,EAAKO,oBAMzB+C,kBAAoB,WAClBd,EAAKC,SAAS,SAACG,GACb,OAAIA,EAAUX,MAAMsB,MAAM,SAAAvD,GAAI,OAAIA,EAAKO,YAC9B,CACL0B,MAAOW,EAAUX,MAAMb,IAAI,SAAApB,GAAI,OAAA8C,OAAAO,EAAA,EAAAP,CAAA,GAC1B9C,EAD0B,CAE7BO,WAAW,OAKV,CACL0B,MAAOW,EAAUX,MAAMb,IAAI,SAAApB,GAAI,OAAA8C,OAAAO,EAAA,EAAAP,CAAA,GAC1B9C,EAD0B,CAE7BO,WAAW,YAMnBiD,UAAY,SAAC5B,GACXY,EAAKC,SAAS,CACZd,eAAgBC,OAIpB6B,YAAc,WACZ,OAAQjB,EAAKR,MAAML,gBACjB,KAAKG,EAAQ,GACX,OAAOU,EAAKR,MAAMC,MAAML,OAAO,SAAA5B,GAAI,OAAKA,EAAKO,YAC/C,KAAKuB,EAAQ,GACX,OAAOU,EAAKR,MAAMC,MAAML,OAAO,SAAA5B,GAAI,OAAIA,EAAKO,YAC9C,QACE,OAAOiC,EAAKR,MAAMC,MAAML,OAAO,SAAA5B,GAAI,OAAIA,EAAKU,SAIlDgD,OAAS,WAAM,IAAAC,EAC4BnB,EAAKR,MAAtCC,EADK0B,EACL1B,MAAOnB,EADF6C,EACE7C,MAAOa,EADTgC,EACShC,eAChBiC,EAAiB3B,EAAML,OAAO,SAAA5B,GAAI,OAAKA,EAAKO,YAAWsD,OACvDC,EAAetB,EAAKiB,cACpBM,EAAiB9B,EAAMsB,MAAM,SAAAvD,GAAI,OAAIA,EAAKO,YAEhD,OACEJ,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,mBAEAF,EAAAC,EAAAC,cAAA,QAAM2D,SAAUxB,EAAKE,SACnBvC,EAAAC,EAAAC,cAAA,SACEC,UAAU,WACV2D,YAAY,yBACZtD,KAAK,OACLC,SAAU4B,EAAKN,SACfG,MAAOvB,MAMK,IAAjBmB,EAAM4B,QACL1D,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACE/D,EAAAC,EAAAC,cAAA,WAASC,UAAU,QACjBH,EAAAC,EAAAC,cAAA,SACEC,UAAWyD,EAAiB,oBAAsB,QAClDvD,QAAQ,cAERL,EAAAC,EAAAC,cAAA,SACEM,KAAK,WACLD,GAAG,aACHJ,UAAU,aACVM,SAAU4B,EAAKc,kBACfzC,QAASkD,IATb,wBAcA5D,EAAAC,EAAAC,cAAC8D,EAAD,CACElD,MAAO6C,EACP5C,cAAesB,EAAKY,oBACpBjC,cAAeqB,EAAKS,cAIxB9C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,GAAAG,OACMmD,EADN,gBAIAzD,EAAAC,EAAAC,cAAC+D,EAAD,CACE3C,QAASK,EACTJ,WAAYc,EAAKgB,UACjB7B,eAAgBA,IAGjBM,EAAMoC,KAAK,SAAArE,GAAI,OAAIA,EAAKO,aACvBJ,EAAAC,EAAAC,cAAA,UACEM,KAAK,SACLL,UAAU,kBACVS,QAASyB,EAAKW,mBAHhB,oDAhKEmB,aCJlBC,IAASb,OACPvD,EAAAC,EAAAC,cAACmE,EAAD,MACAC,SAASC,eAAe","file":"static/js/main.6997eb33.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ todo, onToggled, onDeleted }) => (\n  <li className={todo.completed ? 'completed' : ''}>\n    <div className=\"view\">\n      <label\n        className={todo.completed ? 'checked' : ''}\n        htmlFor={`todo-${todo.id}`}\n      >\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={onToggled}\n          checked={todo.completed}\n          id={`todo-${todo.id}`}\n        />\n\n        {todo.title}\n      </label>\n\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={onDeleted}\n      />\n    </div>\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  onToggled: PropTypes.func.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ items, onTodoToggled, onTodoDeleted }) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        todo={item}\n        onToggled={() => onTodoToggled(item.id)}\n        onDeleted={() => onTodoDeleted(item.id)}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onTodoToggled: PropTypes.func.isRequired,\n  onTodoDeleted: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodosFilters = ({ filters, onFiltered, selectedFilter }) => (\n  <ul className=\"filters\">\n    {filters.map(filter => (\n      <li key={filter}>\n        <a\n          href={`#/${filter}`}\n          className={selectedFilter === filter ? 'selected' : ''}\n          onClick={() => onFiltered(filter)}\n        >\n          {filter}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nTodosFilters.propTypes = {\n  filters: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onFiltered: PropTypes.func.isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n};\n\nexport default TodosFilters;\n","import React, { Component } from 'react';\nimport TodoList from './components/TodoList';\nimport TodosFilter from './components/TodosFilters';\n\nconst FILTERS = [\n  'All',\n  'Active',\n  'Completed',\n];\n\nclass App extends Component {\n  state = {\n    todos: [],\n    title: '',\n    selectedFilter: FILTERS[0],\n  }\n\n  setTitle = (event) => {\n    const title = event.target.value\n      .replace(/[^A-Za-zА-Яа-яі0-9\\s]/, '')\n      .slice(0, 37);\n\n    this.setState({\n      title,\n    });\n  }\n\n  addTodo = (event) => {\n    event.preventDefault();\n\n    this.setState((prevState) => {\n      if (prevState.title.trim() === '') {\n        return '';\n      }\n\n      return {\n        todos: [...prevState.todos, {\n          id: +new Date(),\n          title: prevState.title,\n          completed: false,\n        }],\n        title: '',\n        selectedFilter: FILTERS[0],\n      };\n    });\n  };\n\n  deleteTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  };\n\n  clearAllCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  };\n\n  toggleTodoCompleted = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  };\n\n  toggleAllComplete = () => {\n    this.setState((prevState) => {\n      if (prevState.todos.every(todo => todo.completed)) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: false,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  };\n\n  setFilter = (filter) => {\n    this.setState({\n      selectedFilter: filter,\n    });\n  };\n\n  filterTodos = () => {\n    switch (this.state.selectedFilter) {\n      case FILTERS[1]:\n        return this.state.todos.filter(todo => !todo.completed);\n      case FILTERS[2]:\n        return this.state.todos.filter(todo => todo.completed);\n      default:\n        return this.state.todos.filter(todo => todo.id);\n    }\n  }\n\n  render = () => {\n    const { todos, title, selectedFilter } = this.state;\n    const completedTodos = todos.filter(todo => !todo.completed).length;\n    const visibleTodos = this.filterTodos();\n    const isAllCompleted = todos.every(todo => todo.completed);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.addTodo}>\n            <input\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              type=\"text\"\n              onChange={this.setTitle}\n              value={title}\n            />\n          </form>\n\n        </header>\n\n        {todos.length === 0 || (\n          <>\n            <section className=\"main\">\n              <label\n                className={isAllCompleted ? 'label-checked-all' : 'label'}\n                htmlFor=\"toggle-all\"\n              >\n                <input\n                  type=\"checkbox\"\n                  id=\"toggle-all\"\n                  className=\"toggle-all\"\n                  onChange={this.toggleAllComplete}\n                  checked={isAllCompleted}\n                />\n                Mark all as complete\n              </label>\n\n              <TodoList\n                items={visibleTodos}\n                onTodoToggled={this.toggleTodoCompleted}\n                onTodoDeleted={this.deleteTodo}\n              />\n            </section>\n\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {`${completedTodos} items left`}\n              </span>\n\n              <TodosFilter\n                filters={FILTERS}\n                onFiltered={this.setFilter}\n                selectedFilter={selectedFilter}\n              />\n\n              {todos.some(todo => todo.completed) && (\n                <button\n                  type=\"button\"\n                  className=\"clear-completed\"\n                  onClick={this.clearAllCompleted}\n                >\n                  Clear completed\n                </button>\n              )}\n\n            </footer>\n          </>\n        )}\n\n      </section>\n    );\n  };\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}