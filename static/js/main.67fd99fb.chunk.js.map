{"version":3,"sources":["components/TodoHeader.js","components/TodoItem.js","components/TodoList.js","components/TodoMain.js","components/TodosFilters.js","components/TodoFooter.js","App.js","index.js"],"names":["TodoHeader","state","title","setTitle","event","target","value","slice","_this","setState","validateForm","preventDefault","prevState","trim","props","addTodo","id","Date","completed","render","react_default","a","createElement","className","cn","onSubmit","placeholder","type","onChange","Component","TodoItem","_ref","todo","onToggle","onDelete","htmlFor","concat","checked","onClick","TodoList","items","onToggleTodo","onDeleteTodo","map","item","components_TodoItem","key","TodoMain","todos","visibleTodos","onToggleTodoCompleted","onDeleteCurrentTodo","onToggleAllCompleted","isAllCompleted","every","components_TodoList","TodosFilters","onFilter","selectedFilter","Object","values","FILTER_TYPES","filter","href","TodoFooter","currentFilter","onClearAllCompleted","onSetFilter","completedTodos","length","components_TodosFilters","some","all","active","App","toConsumableArray","deleteTodo","todoId","clearAllCompleted","toggleTodoCompleted","objectSpread2","toggleAllCompleted","setFilter","filterTodos","_this$state","components_TodoHeader","Fragment","components_TodoMain","components_TodoFooter","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.67fd99fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nclass TodoHeader extends Component {\n  state = {\n    title: '',\n  };\n\n  setTitle = (event) => {\n    const title = event.target.value.slice(0, 37);\n\n    this.setState({\n      title,\n    });\n  };\n\n  validateForm = (event) => {\n    event.preventDefault();\n\n    this.setState((prevState) => {\n      if (prevState.title.trim() === '') {\n        return '';\n      }\n\n      this.props.addTodo({\n        id: +new Date(),\n        title: prevState.title,\n        completed: false,\n      });\n\n      return {\n        title: '',\n      };\n    });\n  };\n\n  render = () => {\n    const { title } = this.state;\n\n    return (\n      <header className={cn('header')}>\n        <h1>todos</h1>\n\n        <form onSubmit={this.validateForm}>\n          <input\n            className={cn('new-todo')}\n            placeholder=\"What needs to be done?\"\n            type=\"text\"\n            onChange={this.setTitle}\n            value={title}\n          />\n        </form>\n      </header>\n    );\n  };\n}\n\nTodoHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nconst TodoItem = ({ todo, onToggle, onDelete }) => (\n  <li className={cn(todo.completed && 'completed')}>\n    <div className={cn('view')}>\n      <label\n        className={cn(todo.completed && 'checked')}\n        htmlFor={`todo-${todo.id}`}\n      >\n        <input\n          type=\"checkbox\"\n          className={cn('toggle')}\n          onChange={onToggle}\n          checked={todo.completed}\n          id={`todo-${todo.id}`}\n        />\n\n        {todo.title}\n      </label>\n\n      <button\n        type=\"button\"\n        className={cn('destroy')}\n        onClick={onDelete}\n      />\n    </div>\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ items, onToggleTodo, onDeleteTodo }) => (\n  <ul className={cn('todo-list')}>\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        todo={item}\n        onToggle={() => onToggleTodo(item.id)}\n        onDelete={() => onDeleteTodo(item.id)}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onToggleTodo: PropTypes.func.isRequired,\n  onDeleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport TodoList from './TodoList';\n\nconst TodoMain = ({\n  todos,\n  visibleTodos,\n  onToggleTodoCompleted,\n  onDeleteCurrentTodo,\n  onToggleAllCompleted,\n}) => {\n  const isAllCompleted = todos.every(todo => todo.completed);\n\n  return (\n    <section className={cn('main')}>\n      <label\n        className={cn(isAllCompleted ? 'label-checked-all' : 'label')}\n        htmlFor=\"toggle-all\"\n      >\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className={cn('toggle-all')}\n          onChange={onToggleAllCompleted}\n          checked={isAllCompleted}\n        />\n          Mark all as complete\n      </label>\n\n      <TodoList\n        items={visibleTodos}\n        onToggleTodo={onToggleTodoCompleted}\n        onDeleteTodo={onDeleteCurrentTodo}\n      />\n    </section>\n  );\n};\n\nTodoMain.propTypes = {\n  visibleTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeleteCurrentTodo: PropTypes.func.isRequired,\n  onToggleTodoCompleted: PropTypes.func.isRequired,\n  onToggleAllCompleted: PropTypes.func.isRequired,\n};\n\nexport default TodoMain;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { FILTER_TYPES } from '../App';\n\nconst TodosFilters = ({ onFilter, selectedFilter }) => (\n  <ul className={cn('filters')}>\n    {Object.values(FILTER_TYPES).map(filter => (\n      <li key={filter}>\n        <a\n          href={`#/${filter}`}\n          className={cn(selectedFilter === filter && 'selected')}\n          onClick={() => onFilter(filter)}\n        >\n          {filter}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nTodosFilters.propTypes = {\n  onFilter: PropTypes.func.isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n};\n\nexport default TodosFilters;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport TodosFilters from './TodosFilters';\n\nconst TodoFooter = (\n  { currentFilter, todos, onClearAllCompleted, onSetFilter }\n) => {\n  const completedTodos = todos.filter(todo => !todo.completed).length;\n\n  return (\n    <footer className={cn('footer')}>\n      <span className={cn('todo-count')}>\n        {`${completedTodos} items left`}\n      </span>\n\n      <TodosFilters\n        onFilter={onSetFilter}\n        selectedFilter={currentFilter}\n      />\n\n      {todos.some(todo => todo.completed) && (\n        <button\n          type=\"button\"\n          className={cn('clear-completed')}\n          onClick={onClearAllCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nTodoFooter.propTypes = {\n  currentFilter: PropTypes.string.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onClearAllCompleted: PropTypes.func.isRequired,\n  onSetFilter: PropTypes.func.isRequired,\n};\n\nexport default TodoFooter;\n","import React, { Component } from 'react';\nimport TodoHeader from './components/TodoHeader';\nimport TodoMain from './components/TodoMain';\nimport TodoFooter from './components/TodoFooter';\n\nexport const FILTER_TYPES = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n\nclass App extends Component {\n  state = {\n    todos: [],\n    selectedFilter: FILTER_TYPES.all,\n  };\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        todo,\n      ],\n      selectedFilter: FILTER_TYPES.all,\n    }));\n  };\n\n  deleteTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  };\n\n  clearAllCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  };\n\n  toggleTodoCompleted = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  };\n\n  toggleAllCompleted = () => {\n    this.setState((prevState) => {\n      if (prevState.todos.every(todo => todo.completed)) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: false,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  };\n\n  setFilter = (filter) => {\n    this.setState({\n      selectedFilter: filter,\n    });\n  };\n\n  filterTodos = () => {\n    switch (this.state.selectedFilter) {\n      case FILTER_TYPES.active:\n        return this.state.todos.filter(todo => !todo.completed);\n      case FILTER_TYPES.completed:\n        return this.state.todos.filter(todo => todo.completed);\n      default:\n        return this.state.todos.filter(todo => todo.id);\n    }\n  };\n\n  render = () => {\n    const { todos, selectedFilter } = this.state;\n    const visibleTodos = this.filterTodos();\n\n    return (\n      <section className=\"todoapp\">\n        <TodoHeader\n          addTodo={this.addTodo}\n        />\n\n        {todos.length === 0 || (\n          <>\n            <TodoMain\n              todos={todos}\n              visibleTodos={visibleTodos}\n              onToggleAllCompleted={this.toggleAllCompleted}\n              onToggleTodoCompleted={this.toggleTodoCompleted}\n              onDeleteCurrentTodo={this.deleteTodo}\n            />\n\n            <TodoFooter\n              todos={todos}\n              onSetFilter={this.setFilter}\n              currentFilter={selectedFilter}\n              onClearAllCompleted={this.clearAllCompleted}\n            />\n          </>\n        )}\n\n      </section>\n    );\n  };\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}